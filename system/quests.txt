/* improvments:
+ player give letter animation (+msg item given)
+ unit reads letter
+ unit gives response letter*/
quest deliver_letter {
	type mayor
	progress {
		none
		started
		timeout
		get_response
		finished
	}
	
	code ${
		Item@ letter;
		
		void on_init()
		{
			@instance.target_loc = World_GetRandomSettlement(instance.start_loc);
			Dialog_Continue("start");
		}
		
		void on_progress()
		{
			switch(progress)
			{
			case started:
				{
					letter = Item_CreateQuestItem(instance, "letter");
					letter.name = Text("letterName");
					player.unit.AddItem(letter);
					Journal_AddQuestEntry(Text("name"), Text("infoStart"), Text("infoStart2"));
					Quest_AddTimeout(timeout, 30);
					Event_OnEnter(target_loc, on_enter);
				}
				break;
			case timeout:
				{
					Journal_UpdateQuestEntry(Text("infoTimeout"));
					Quest_Fail();
					talker.AddSingleGreeting("fail");
				}
				break;
			case get_response:
				{
					letter.name = Text("letterResponseName");
					Journal_UpdateQuestEntry(Text("infoResponse"));
					talker.RemoveDialog();
					Event_OnEnter(start_loc, on_enter2);
				}
				break;
			case finished:
				{
					talker.RemoveItem(letter);
					Team_AddReward(100);
					Journal_UpdateQuestEntry(Text("infoFinished"));
					Quest_Finish(); // set quest entry as finished, remove events & timeouts & dialogs, apply mayor/captain quest info
				}
				break;
			}
		}
		
		void on_enter()
		{
			Settlement_GetMayor().AddDialog("give_letter"); // AddDialog store quest_instance ptr, so it can't remove it later
		}
		
		void on_enter2()
		{
			Settlement_GetMayor().AddDialog("give_response");
		}
	}$
	
	dialog start {
		talk info
		choice gYes {
			talk accepted0
			talk accepted1
			set_quest_progress started
			end
		}
		escape choice gNo
			end
		show_choices
	}
	
	dialog give_letter {
		if script "player.unit.HaveItem(letter)"
			choice giveLetter {
				talk received0
				talk received1
				set_quest_progress get_response
				end
			}
	}
	
	dialog give_response {
		if script "player.unit.HaveItem(letter)"
			choice giveLetter {
				talk finish0
				talk finish1
				talk finish2
				set_quest_progress finished
				end
			}
	}
	
	dialog fail {
		talk fail
		end
	}
}

/*quest find_herbs {
		
	progress {
		none
		started
		timeout
		complete
	}

	code ${
		void on_init()
		{
			assert_var(owner);
			owner.AddGreet("start", 100); // id dialogu, priorytet
		}
		
		void on_progress()
		{
			if(progress == started)
			{
				AddQuestEntry(text["name"], text["infoStart"]);
				owner.RemoveGreet("start");
				owner.AddDialog("check_item", 100);
				owner.SetTimer(timeout, 10); // timeout po 10 dniach na progress timeout
			}
			else if(progress == complete)
			{
				QuestDone(text["done"]);
				player.unit.RemoveItem("ziele");
				owner.AddItem("ziele");
				Team.GoldReward(300);
			}
			else if(progress == timeout)
			{
				QuestFail(text["timeout"]);
				owner.RemoveDialog("check_item");
			}
		}
	}$
		
	dialog start {
		talk greet0
		talk greet1
		talk greet2
		choice yes
			do_progress started // jak set_progress ale nie wraca
		escape choice no
			end // bêdzie gada³ przy ka¿dym rozpoczêciu dialogu
		show_choices
	}
	
	dialog accepted {
		talk accepted
		end
	}
	
	dialog check_item {
		if have_item "ziele" {
			choice give
				do_progress complete
		}
	}
}*/
